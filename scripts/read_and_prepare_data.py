import pandas as pd
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from io import BytesIO


def extraer_tabla_historico(df: pd.DataFrame) -> pd.DataFrame:
    """
    Extrae y limpia la tabla de resumen por categor√≠as desde un DataFrame.
    Incluye 'Total', marca si es total y si la fila es roja en el Excel.
    """

    end_row = df[df.iloc[:, 0].astype(str).str.contains("Total", case=False, na=False)].index.min()
    tabla = df.iloc[1:end_row + 1, [0, 1, 4, 5, 6, 18, 19, 21]].copy()
    tabla.columns = ["Categor√≠a", "Recibidas", "Atendidas_num", "Atendidas_%", "Duracion",
                     "Desborde_cantidad", "Desborde_tiempo", "Abandonadas"]

    # Marcar fila 'Total'
    tabla["EsTotal"] = tabla["Categor√≠a"].astype(str).str.contains("Total", case=False, na=False)

    # Marcar si es roja seg√∫n openpyxl (usamos √≠ndice original)


    # Filtrar solo las que tienen % v√°lido
    tabla = tabla[tabla["Atendidas_%"].astype(str).str.contains("%", na=False)]

    # Limpiar y convertir valores
    tabla["Atendidas_%"] = (
        tabla["Atendidas_%"].astype(str)
        .str.replace(",", ".")
        .str.replace(" %", "", regex=False)
        .astype(float)
    )

    return tabla.reset_index(drop=True)

def extraer_tabla_categorias(path_excel: str) -> pd.DataFrame:

    df = pd.read_csv(path_excel, encoding='ISO-8859-1', delimiter=';')

    
    print("Hojas disponibles")
    tabla = df.iloc[:, [0, 1, 4, 5, 6, 18, 19, 21]].copy()
    tabla.columns = ["Categor√≠a", "Recibidas", "Atendidas_num", "Atendidas_%", "Duracion",
                     "Desborde_cantidad", "Desborde_tiempo", "Abandonadas"]
    # Limpiar y convertir porcentaje
    tabla = tabla[tabla["Atendidas_%"].astype(str).str.contains("%", na=False)]

    tabla["Atendidas_%"] = (
        tabla["Atendidas_%"]
        .astype(str)
        .str.replace(",", ".")
        .str.replace(" %", "", regex=False)
        .astype(float)
    )

    return tabla.reset_index(drop=True), df
    

import pandas as pd
from datetime import datetime

def extraer_tabla_dias(path_excel: str) -> pd.DataFrame:
    """
    Extrae y limpia la tabla por d√≠a desde la primera hoja de un Excel.
    A√±ade la columna 'D√≠a' (nombre del d√≠a en espa√±ol) como primera columna, excepto en la fila final (total).
    """

    # Diccionario para traducir los d√≠as de la semana
    dias_semana = {
        "Monday": "Lunes",
        "Tuesday": "Martes",
        "Wednesday": "Mi√©rcoles",
        "Thursday": "Jueves",
        "Friday": "Viernes",
        "Saturday": "S√°bado",
        "Sunday": "Domingo",
    }

    # Leer la primera hoja del Excel
    df = pd.read_csv(path_excel, encoding='ISO-8859-1', delimiter=';')

    # Seleccionar columnas relevantes
    tabla = df.iloc[:, [0, 1, 4, 5]].copy()
    tabla.columns = ["Categor√≠a", "Recibidas", "Atendidas_num", "Atendidas_%"]

    # Limpiar y convertir porcentaje
    tabla = tabla[tabla["Atendidas_%"].astype(str).str.contains("%", na=False)]
    tabla["Atendidas_%"] = (
        tabla["Atendidas_%"]
        .astype(str)
        .str.replace(",", ".")
        .str.replace(" %", "", regex=False)
        .astype(float)
    )

    # A√±adir columna D√≠a (excepto para la √∫ltima fila)
    dias = []
    for i in range(len(tabla)):
        if i < len(tabla) - 1:
            try:
                dia = dias_semana[datetime.strptime(tabla.loc[i, "Categor√≠a"], "%d-%m-%Y").strftime("%A")]
            except Exception:
                dia = ""
        else:
            dia = ""
        dias.append(dia)

    tabla.insert(0, "D√≠a", dias)
    df.insert(0, "D√≠a", dias)

    return tabla.reset_index(drop=True), df



def extraer_tabla_franjas(path_excel: str) -> pd.DataFrame:
    """
    Extrae y limpia la tabla por franja horaria desde un DataFrame.
    Detecta si la fila est√° escrita en rojo, incluye columna EsTotal y limpia %.
    """
    df = pd.read_csv(path_excel, encoding='ISO-8859-1', delimiter=';')


    # Extraer tabla
    tabla = df.iloc[:, [0, 1, 4, 5]].copy()
    tabla.columns = ["Categor√≠a", "Recibidas", "Atendidas_num", "Atendidas_%"]


    # Limpiar porcentaje
    tabla = tabla[tabla["Atendidas_%"].astype(str).str.contains("%", na=False)]
    tabla["Atendidas_%"] = (
        tabla["Atendidas_%"]
        .astype(str)
        .str.replace(",", ".")
        .str.replace(" %", "", regex=False)
        .astype(float)
    )

    return tabla.reset_index(drop=True), df

import pandas as pd
import streamlit as st

def leer_tablas(path_paquete: str, meses: list[str]) -> dict:
    """
    Lee las tablas de categor√≠as, d√≠as y franjas horarias desde un archivo Excel.
    """
    st.write("üì• Paso 1: Accediendo a paths individuales")
    path_excel_historico = path_paquete[3]
    path_excel_categorias = path_paquete[0]
    path_excel_dias = path_paquete[1]
    path_excel_franjas = path_paquete[2]

    st.write("‚úÖ Paths extra√≠dos correctamente")

    tablas_mes = {}
    for m in meses[:-1]:  # Excluimos el mes actual
        st.write(f"üìä Leyendo hoja hist√≥rica del mes: {m}")
        try:
            df = pd.read_excel(path_excel_historico, sheet_name=m, header=None)
            tablas_mes[m] = extraer_tabla_historico(df)
            st.write(f"‚úÖ Hoja '{m}' le√≠da correctamente con shape {df.shape}")
        except Exception as e:
            st.error(f"‚ùå Error al leer hoja '{m}': {e}")
            raise

    st.write("üìå Paso 2: leyendo tablas individuales...")

    try:
        categorias_filtrado, df_categorias = extraer_tabla_categorias(path_excel_categorias)
        st.write("‚úÖ Tabla de categor√≠as le√≠da:", df_categorias.shape)
    except Exception as e:
        st.error(f"‚ùå Error en categor√≠as: {e}")
        raise

    try:
        dias_filtrado, df_dias = extraer_tabla_dias(path_excel_dias)
        st.write("‚úÖ Tabla de d√≠as le√≠da:", df_dias.shape)
    except Exception as e:
        st.error(f"‚ùå Error en d√≠as: {e}")
        raise

    try:
        franjas_filtrado, df_franjas = extraer_tabla_franjas(path_excel_franjas)
        st.write("‚úÖ Tabla de franjas le√≠da:", df_franjas.shape)
    except Exception as e:
        st.error(f"‚ùå Error en franjas: {e}")
        raise

    tablas = {
        "categorias": categorias_filtrado,
        "dias": dias_filtrado,
        "franjas": franjas_filtrado
    }

    st.write("üìå Paso 3: Generando Excel con resumen")

    try:
        excel = append_dfs_to_excel_path(
            path_excel_historico,
            df_categorias,
            df_dias,
            df_franjas,
            sheet_name=meses[-1]  # √öltimo mes
        )
        st.write("‚úÖ Excel actualizado generado correctamente")
    except Exception as e:
        st.error(f"‚ùå Error al generar Excel actualizado: {e}")
        raise

    st.write("‚úÖ Todas las tablas le√≠das y procesadas correctamente")

    return tablas, tablas_mes, excel



def append_dfs_to_excel_path(excel_path: str, df1, df2, df3, sheet_name="Resumen") -> BytesIO:
    # Load workbook from path
    wb = load_workbook(filename=excel_path)

    # If sheet exists, delete it
    if sheet_name in wb.sheetnames:
        del wb[sheet_name]

    # Create new sheet
    ws = wb.create_sheet(title=sheet_name)

    # Write DataFrames with 3-row spacing
    start_row = 1
    for df in [df1, df2, df3]:
        for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), start=start_row):
            for c_idx, value in enumerate(row, start=1):
                ws.cell(row=r_idx, column=c_idx, value=value)
        start_row += len(df) + 4  # 3 blank rows + 1 header

    # Save to BytesIO to return through Streamlit
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return output
if __name__ == "__main__":
    # Ejemplo de uso
    MESES = [ "ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO",
                       "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE" ]
    path_excel = "data/INFORME DE LLAMADAS AUTOCLIMA ABRIL 2025.xlsx"
    nombre_hoja = "ABRIL"
    meses_hasta_ahora = MESES[:MESES.index(nombre_hoja)]

    leer_tablas(path_excel, meses_hasta_ahora)
